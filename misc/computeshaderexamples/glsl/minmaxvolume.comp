/*********************************************************************************
 *
 * Inviwo - Interactive Visualization Workshop
 *
 * Copyright (c) 2024 Inviwo Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *********************************************************************************/

#if !defined IMAGE_FORMAT
#define IMAGE_FORMAT r32f
#endif
#if !defined IMAGE_SOURCE
#  define IMAGE_SOURCE image3D
#endif

#if defined USE_IMAGE_SAMPLER
#  define GetValue(gsampler, imageCoord) texelFetch(gsampler, imageCoord, 0)
#  define GetSize(gsampler) textureSize(gsampler, 0)
#else
#  define GetValue(gimage, imageCoord) imageLoad(gimage, imageCoord)
#  define GetSize(gimage) imageSize(gimage)
#endif  // USE_IMAGE_SAMPLER

#if defined USE_IMAGE_SAMPLER
uniform IMAGE_SOURCE volume;
#else
uniform layout(binding=0, IMAGE_FORMAT) readonly IMAGE_SOURCE volume;
#endif  // USE_IMAGE_SAMPLER

layout (std430, binding=3) buffer BufferObject {
    vec4 minmax[];
};

// 32x32 per workgroup
shared vec4 workgroup_min[1024 / 32];
shared vec4 workgroup_max[1024 / 32];

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main(){
    ivec3 volDims = GetSize(volume);

    vec4 minVal = vec4(1.0 / 0.0);
    vec4 maxVal = vec4(-1.0 / 0.0);

    ivec3 volIndex = ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);

    if (all(lessThan(volIndex, volDims))) {
        for (int z = 0; z < volDims.z; ++z) {
            vec4 val = GetValue(volume, volIndex + ivec3(0, 0, z));
            minVal = min(minVal, val);
            maxVal = max(maxVal, val);
        }
    }

    minVal = subgroupMin(minVal);
    maxVal = subgroupMax(maxVal);
    if (subgroupElect()) {
        workgroup_min[gl_SubgroupID] = minVal;
        workgroup_max[gl_SubgroupID] = maxVal;
    }
    barrier();

    if (gl_LocalInvocationIndex == 0) {
        for (uint i = 0; i < gl_NumSubgroups; ++i) {
            minVal = min(minVal, workgroup_min[i]);
            maxVal = max(maxVal, workgroup_max[i]);
        }
        uint index = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
        minmax[2 * index] = minVal;
        minmax[2 * index + 1] = maxVal;
    }
}
