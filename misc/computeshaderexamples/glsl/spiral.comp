/*********************************************************************************
 *
 * Inviwo - Interactive Visualization Workshop
 *
 * Copyright (c) 2020-2025 Inviwo Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *********************************************************************************/

uniform int numPoints;
uniform float radius = 1;
uniform float rotations = 1;
uniform float height = 1;

uniform sampler2D tf;

layout(std430, binding=0) buffer posBuffer {    
    vec4 pos[];
};

layout(std430, binding=1) buffer colBuffer {
    vec4 col[];
};

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1 ) in;
void main(){
    uint gid = gl_GlobalInvocationID.x;
    float x = gid;
    x /= numPoints-1;

    vec4 P = vec4(0,0,0,1);
     P.x = sin(x*3.14*2*rotations)*radius;
     P.y = cos(x*3.14*2*rotations)*radius;
     P.z = x * height - height/2;

    vec4 C = vec4(mix(vec3(1,0,0),vec3(0,1,0),x),1);

    C = texture(tf,vec2(x,0.5));

    pos[gid] = P;
    col[gid] = C;
}